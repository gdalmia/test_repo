// Copyright Koninklijke Philips N.V., 2020. All Right Reserved

/*----------------------------------------------------
 |   This file was generated by Sense Composer 2.0   |
 |  Do not modify the Sense Composer Generated Code  |
 ----------------------------------------------------*/
#pragma once

#include "scrollablelabel.ui.h"
#include <Sense.h>
#include <DLS.h>

namespace Philips { namespace Workflow { namespace Control { namespace Ui {
	
	using namespace Sense;
	using namespace Sense::DLS;
	
	class DialogBoxTouch : public Dialog
	{
	public:
	
		DialogBoxTouch(Control &parent)
		:
			Dialog(parent)
		#pragma region Sense Composer (do not modify)
	,	opacityBuffer    (*this)
	,	headerSpacer     (opacityBuffer)
	,	message          (opacityBuffer)
	,	bodySpacer       (opacityBuffer)
	,	description      (opacityBuffer)
	,	footerSpacer     (opacityBuffer)
	,	footer           (opacityBuffer)
	,	space            ((Control&)footer)
	,	third            (footer)
	,	cancel           (footer)
	,	ok               (footer)
	,	bottomSpacer     (opacityBuffer)
		#pragma endregion
		{
		#pragma region Sense Composer (do not modify)
		layoutUpdateBegin();
		name                             = L"dialogMessage";
		size                             = Size(960, 272);
		font                             = Font(L"CentraleSansBook", 20, false, false, false, false, Font::Antialias::High, 0);
		layoutSpacing                    = 0;
		headerSize                       = 12;
		radius                           = Corners(4, 4, 4, 4);
		shadow                           = Margin(10, 10, 20, 20);
		colorShadow                      = Palette::Black * 0.35;
		colorHeader                      = Color::fromRgb(43, 174, 254);
		colorFont                        = Palette::White;
		color                            = Palette::Gray70;
		headerFont                       = Font(L"CentraleSansBold", 32, false, false, false, false, Font::Antialias::High, 0);
		text                             = L"";
		textMargin                       = Margin(48, 0, 24, 0);
		opacityBuffer.name               = L"opacityBuffer";
		opacityBuffer.size               = Size(960, 260);
		opacityBuffer.layout             = Layout::Fill;
		opacityBuffer.layoutSpacing      = 0;
		headerSpacer.name                = L"headerSpacer";
		headerSpacer.size                = Size(960, 28);
		headerSpacer.layout              = Layout::Fixed1d;
		message.name                     = L"message";
		message.position                 = Point(32, 28);
		message.size                     = Size(896, 36);
		message.font                     = Font(L"CentraleSansBold", 32, false, false, false, false, Font::Antialias::High, 0);
		message.layout                   = Layout::Fixed1d;
		message.layoutOuterMargin        = Margin(32, 0, 32, 0);
		message.text                     = L"";
		message.color                    = Palette::White;
		message.verticalAlign            = VAlign::Middle;
		bodySpacer.name                  = L"bodySpacer";
		bodySpacer.position              = Point(0, 64);
		bodySpacer.size                  = Size(960, 40);
		bodySpacer.layout                = Layout::Fixed1d;
		description.name                 = L"description";
		description.position             = Point(32, 104);
		description.size                 = Size(896, 0);
		description.font                 = Font(L"CentraleSansBook", 24, false, false, false, false, Font::Antialias::High, 0);
		description.layout               = Layout::Fixed1d;
		description.layoutOuterMargin    = Margin(32, 0, 32, 0);
		footerSpacer.name                = L"footerSpacer";
		footerSpacer.position            = Point(0, 104);
		footerSpacer.size                = Size(960, 40);
		footerSpacer.layout              = Layout::Fixed1d;
		footer.name                      = L"Footer";
		footer.position                  = Point(0, 136);
		footer.size                      = Size(960, 64);
		footer.layout                    = Layout::Fixed1d;
		footer.layoutInnerMargin         = Margin(0, 0, 20, 0);
		footer.layoutSpacing             = 12;
		footer.layoutOrientation         = Orientation::Horizontal;
		space.name                       = L"space";
		space.position                   = Point(8, 0);
		space.size                       = Size(284, 64);
		space.layout                     = Layout::Fill;
		space.layoutOuterMargin          = Margin(8, 0, 0, 0);
		third.name                       = L"third";
		third.position                   = Point(304, 0);
		third.size                       = Size(200, 64);
		third.font                       = Font(L"CentraleSansBook", 20, false, false, false, false, Font::Antialias::High, 0);
		third.layout                     = Layout::Fixed1d;
		third.text                       = L"";
		third.radius                     = Corners(4, 4, 4, 4);
		third.textMargin                 = Margin(16, 4, 16, 4);
		third.textType                   = TextType::SingleLine;
		third.colorFontUp                = Palette::Gray80;
		third.colorFontDown              = Palette::Gray80;
		third.colorFontHover             = Palette::Gray80;
		third.colorFontDisabled          = Palette::Gray80 * 0.50;
		third.colorButtonUp              = Palette::Gray20;
		third.colorButtonDown            = Palette::Gray10;
		third.colorButtonHover           = Palette::Gray15;
		third.colorButtonDisabled        = Palette::Gray20 * 0.35;
		cancel.name                      = L"cancel";
		cancel.position                  = Point(516, 0);
		cancel.size                      = Size(200, 64);
		cancel.font                      = Font(L"CentraleSansBook", 20, false, false, false, false, Font::Antialias::High, 0);
		cancel.layout                    = Layout::Fixed1d;
		cancel.text                      = L"";
		cancel.radius                    = Corners(4, 4, 4, 4);
		cancel.textMargin                = Margin(16, 4, 16, 4);
		cancel.textType                  = TextType::SingleLine;
		cancel.colorFontUp               = Palette::Gray80;
		cancel.colorFontDown             = Palette::Gray80;
		cancel.colorFontHover            = Palette::Gray80;
		cancel.colorFontDisabled         = Palette::Gray80 * 0.50;
		cancel.colorButtonUp             = Palette::Gray20;
		cancel.colorButtonDown           = Palette::Gray10;
		cancel.colorButtonHover          = Palette::Gray15;
		cancel.colorButtonDisabled       = Palette::Gray20 * 0.35;
		ok.name                          = L"ok";
		ok.position                      = Point(728, 0);
		ok.size                          = Size(200, 64);
		ok.font                          = Font(L"CentraleSansBook", 20, false, false, false, false, Font::Antialias::High, 0);
		ok.layout                        = Layout::Fixed1d;
		ok.checked                       = true;
		ok.text                          = L"";
		ok.radius                        = Corners(4, 4, 4, 4);
		ok.textMargin                    = Margin(16, 4, 16, 4);
		ok.textType                      = TextType::SingleLine;
		ok.accent                        = true;
		ok.colorFontUp                   = Palette::White;
		ok.colorFontDown                 = Palette::White;
		ok.colorFontHover                = Palette::White;
		ok.colorFontDisabled             = Palette::White * 0.50;
		ok.colorFocusUp                  = Palette::Blue60;
		ok.colorFocusDown                = Palette::Blue50;
		ok.colorFocusHover               = Palette::Blue55;
		ok.colorFocusDisabled            = Palette::Blue60 * 0.35;
		bottomSpacer.name                = L"BottomSpacer";
		bottomSpacer.position            = Point(0, 200);
		bottomSpacer.size                = Size(960, 20);
		bottomSpacer.layout              = Layout::Fixed1d;
		layoutUpdateEnd();
		#pragma endregion
		}
	
	#pragma region Sense Composer (do not modify)
	public:    Buffer            opacityBuffer;
	public:    Spacer            headerSpacer;
	public:    Label             message;
	public:    Spacer            bodySpacer;
	public:    ScrollableLabel   description;
	public:    Spacer            footerSpacer;
	public:    Control           footer;
	public:    Control           space;
	public:    ButtonCustom      third;
	public:    ButtonCustom      cancel;
	public:    ButtonCustom      ok;
	public:    Spacer            bottomSpacer;
	#pragma endregion
	
	private:
	
		DialogBoxTouch(const DialogBoxTouch&);
		DialogBoxTouch& operator=(const DialogBoxTouch&);
	};
	
}}}}

